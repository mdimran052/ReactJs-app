{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","socketUrl","lastMessage","useWebSocket","useEffect","document","title","inlinestylesGood","color","inlinestylesSat","inlinestylesSev","inlinestylesVP","inlinestylesPoor","inlinestylesMod","className","Table","bordered","hover","variant","JSON","parse","data","map","city","style","Math","round","aqi","parseFloat","toFixed","desc","range","LineChart","width","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","type","stroke","activeDot","r","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d88da3f2.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport useWebSocket from 'react-use-websocket';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Table from 'react-bootstrap/Table'\nimport './App.css';\n\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend\n} from \"recharts\";\n\nfunction App() {\n  //Public API that will echo messages sent to it back to the client\n  const [socketUrl, setSocketUrl] = useState('wss://city-ws.herokuapp.com');\n  const {\n    lastMessage\n  } = useWebSocket(socketUrl);\n  \n  useEffect(()=>{\n    document.title=\"Proximity AQI Test\";});\n\n  let inlinestylesGood : any = {color:'#00e600'};\n  let inlinestylesSat  : any = {color:'#009900'};\n  let inlinestylesSev  : any = {color:'#990000'};\n  let inlinestylesVP   : any = {color:'#e60000'};\n  let inlinestylesPoor : any = {color:'#ff8c00'};\n  let inlinestylesMod  : any = {color:'#ffff66'};\n  \n  let standards :any =[{'range':'0-51','desc':'Good'},\n  {'range':'51-100','desc':'Satisfactory'},\n  {'range':'101-200','desc':'Moderate'},\n  {'range':'201-300','desc':'Poor'},\n  {'range':'301-400','desc':'Very Poor'},\n  {'range':'401-500','desc':'Severe'}] \n  \n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <h2>Air Quality Index Dashboard</h2>\n          <Table bordered hover variant=\"dark\" className=\"App-Table-Size\">\n            <thead>\n              <tr>\n                <th className=\"col-md-1\">City</th>\n                <th className=\"col-sm-1\">Current AQI</th>\n                <th className=\"col-md-2\">Last Updated</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                lastMessage ? \n                  JSON.parse(lastMessage.data).map((data:any)=>(\n                    <tr>\n                      <td>{data.city}</td>\n                      <td className=\"App-col\" style={Math.round(data.aqi)<50 ? inlinestylesGood:\n                        Math.round(data.aqi)>51 && Math.round(data.aqi)<=100?inlinestylesSat:\n                        Math.round(data.aqi)>100 && Math.round(data.aqi)<=200?inlinestylesMod:\n                        Math.round(data.aqi)>200 && Math.round(data.aqi)<=300?inlinestylesPoor:\n                        Math.round(data.aqi)>300 && Math.round(data.aqi)<=400?inlinestylesVP:\n                        Math.round(data.aqi)>400 && Math.round(data.aqi)<=500?inlinestylesSev:null}>\n                          {parseFloat(data.aqi).toFixed(2)}</td>\n                      <td>Few seconds ago</td>\n                  </tr>\n                  )):null\n              }  \n            </tbody>\n          </Table>\n        </div>\n        <div className=\"col\">\n          <h2>Central Pollution Control Board's - Air Pollution Standards</h2>\n          <Table bordered hover>\n            <thead>\n              <th>Color</th>\n              <th>Description</th>\n            </thead>\n            <tbody>\n              {\n              standards.map((data:any)=>(\n              <tr className={data.desc==='Good'?\"App-Good\":data.desc==='Satisfactory'?\"App-Sat\":\n              data.desc==='Moderate'?\"App-Mod\":data.desc==='Poor'?\"App-Poor\":\n              data.desc==='Very Poor'?\"App-VP\":data.desc==='Severe'?\"App-Sev\":\"\"}>\n                <td>{data.range}</td>\n                <td>{data.desc}</td>\n              </tr>\n              ))}\n            </tbody>\n          </Table>\n        </div>\n        <div>\n        <h2> Chart </h2>\n          <LineChart\n              width={1200}\n              height={300}\n              data={lastMessage ?  JSON.parse(lastMessage.data) : null}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5\n              }}\n            >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"city\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Line\n              type=\"monotone\"\n              dataKey=\"aqi\"\n              stroke=\"#8884d8\"\n              activeDot={{ r: 8 }}\n            />\n            </LineChart>\n          </div>\n      </div>      \n    </div>\n  );\n};\n\n  export default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}